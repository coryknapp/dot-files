global !p
def getStdNamespaceIfNeeded():
    # open the file we're currently editing
    fh = open( path )
    # search the first 20 lines for the std namespace.
    counter = 20;
    for line in fh.readlines():
        if line.strip() == 'using namespace std;':
            return '';
        # skip preprocessor stuff, and comment lines
        elif line[0:1] != '#' and line[0:2] != '//':
            counter = counter - 1;
        if counter == 0:
            # we didn't find it.
            return 'std::'
    # we ran out of lines and didn't find it
    return 'std::'

def junit(snip):
	if snip.opt("g:ultisnips_java_junit", "") == "3":
		snip += ""
	else:
		snip.rv += "@Test\n\t"

def getArgs(group):
	import re
	word = re.compile('[a-zA-Z><.]+ \w+')
	return [i.split(" ") for i in word.findall(group) ]

def camel(word):
	if not word: return ''
	return word[0].upper() + word[1:]

def mixedCase(word):
	if not word: return ''
	return word[0].lower() + word[1:]

endglobal

snippet /cout|pr/ "cout (smart)" !
`!p snip.rv = getStdNamespaceIfNeeded()`cout << ${1:"foo"} << `!p snip.rv = getStdNamespaceIfNeeded()`endl;
endsnippet

snippet /coutij|prij/ "cout i and j coords (smart)" !
`!p snip.rv = getStdNamespaceIfNeeded()`cout << ${1:"foo"} << i << '\t' << j << `!p snip.rv = getStdNamespaceIfNeeded()`endl;
endsnippet

snippet clc "class with constructor, fields, setter and getters" b
class `!p # here we generate the class name
snip.rv = snip.basename or "untitled"` {
`!p #this generates the data members from the arglist
args = getArgs(t[1])
if len(args) == 0: snip.rv = ""
for i in args:
	snip.rv += "\n\t" + i[0] + " m_" + i[1]+ ";"
if len(args) > 0:
	snip.rv += "\n"`
	`!p snip.rv = snip.basename or "unknown" #constructor with arg list`($1)`!p
if len(args) > 0:
	snip.rv += " :" #use init list if there are args
args = getArgs(t[1]) #initializer list
for i in args:
	snip.rv += "\n\t\tm_" + i[1] + "( " + i[1] + " ),"
snip.rv = snip.rv[:-1] #trim last space
if len(args) == 0:
	snip.rv += "\n"`{
	}$0
`!p
args = getArgs(t[1])
if len(args) == 0: snip.rv = ""
for i in args:
	snip.rv += "\n\tvoid set" + camel(i[1]) + "(" + i[0] + " " + i[1] + ") {\n" + "\
	\tm_" + i[1] + " = " + i[1] + ";\n\t}\n"

	snip.rv += "\n" + i[0] + " get" + camel(i[1]) + "() {\
	\n\t\treturn m_" + i[1] + ";\n\t}\n"
`
}
endsnippet

#includes
snippet incio "#include <iostream>" b
#include <iostream>
$0
endsnippet

snippet incv "#include <vector>" b
#include <vector>
$0
endsnippet

snippet incsf "#include <SFML/*.hpp>" b
#include <SFML/Audio.hpp>
#include <SFML/Graphics.hpp>
#include <SFML/Window.hpp>
$0
endsnippet

snippet incm "#include <map>" b
#include <map>
endsnippet

snippet temp "template <typename T>" b
template <typename ${1:T}>
$2
endsnippet

snippet temp2 "template <typename T, typename Y>" b
template <typename ${1:T}, typename ${2:Y}>
$3
endsnippet


snippet oper "Operator overload" b
${1:`!p snip.rv = snip.basename or "class"`} $1::operator${2:=}(const $1 &o){
	$3
}
endsnippet

snippet operh "Operator overload for class header" b
${1:`!p snip.rv = snip.basename or "class"`} operator${2:=}(const $1 &o);
$3
endsnippet

snippet dpp "Documentation with description, precondition, and postcondition" b
// $1
// PRECONDITION: ${2:nothing}
// POSTCONDITION: ${3:nothing}
endsnippet
